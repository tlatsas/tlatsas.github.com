<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: firefox | > kodama.gr_]]></title>
  <link href="http://www.kodama.gr/tags/firefox/atom.xml" rel="self"/>
  <link href="http://www.kodama.gr/"/>
  <updated>2013-10-13T14:34:25+03:00</updated>
  <id>http://www.kodama.gr/</id>
  <author>
    <name><![CDATA[Tasos Latsas]]></name>
    <email><![CDATA[tlatsas@gmx.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[view your public IP from pentadactyl/vimperator]]></title>
    <link href="http://www.kodama.gr/2012/09/22/view-your-public-IP-from-pentadactyl-vimperator/"/>
    <updated>2012-09-22T12:41:07+03:00</updated>
    <id>http://www.kodama.gr/2012/09/22/view-your-public-IP-from-pentadactyl-vimperator</id>
    <content type="html"><![CDATA[<p><a href="http://5digits.org/pentadactyl/">Pentadactyl</a> and <a href="http://www.vimperator.org/vimperator">vimperator</a>
extensions allow you to write handy functions in javascript. These
functions can be later called from the command mode or from keybindings.</p>

<p>Some time ago, I wrote a simple function, that makes a request to a page which returns your
public ip address. That way you don’t have to actually visit that page and interrupt your
flow of work. I find this extremely useful as I frequentlty use VPNs and SOCKS proxies.</p>

<p>The js code is the following:</p>

<p><div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">ip</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="err">‘</span><span class="nx">GET</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">http</span><span class="o">:</span><span class="c1">//ipz.herokuapp.com/’, true);&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">req</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">dactyl</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">dactyl</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span> <span class="p">}</span> 
</code></pre></div>
</code></pre>

<p>I used a very simple service I wrote and is currently deployed at heroku,
<a href="https://github.com/tlatsas/ipz">ipz</a>. You can use any of the popular services
like <a href="http://www.icanhazip.com/">icanhazip</a> or <a href="http://checkip.dyndns.org">checkip</a>
service from dyndns.</p>

<p>In order for this to work, you need to put the function in your <code>~/.pentadactylrc</code> enclosed
in a here-document block:</p>

<p><div class="highlight"><pre><code class="bash">javascript « EOF
 <span class="k">function</span>-here
EOF
</code></pre></div></p>

<p>I also set a command to call this function by typing <code>:ip</code>, the command is:</p>

<p><div class="highlight"><pre><code class="bash"><span class="nb">command </span>ip -js ip<span class="o">()</span>
</code></pre></div></p>

<p>In order for this to work in vimperator, we need some adjustments. Put the following code in your
<code>~/.vimperatorrc</code>.</p>

<p><div class="highlight"><pre><code class="javascript">    <span class="nx">ip</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
        <span class="nx">req</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="err">‘</span><span class="nx">GET</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">http</span><span class="o">:</span><span class="c1">//ipz.herokuapp.com/’, true);&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="nx">req</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="nx">liberator</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">liberator</span><span class="p">.</span><span class="nx">echoerr</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
<span class="p">}</span> 
</code></pre></div>
</code></pre>

<p>Again don’t forget the here-document block and the command, which are a bit different.</p>

<p><div class="highlight"><pre><code class="bash">:js « EOF
 <span class="k">function</span>-here
EOF
</code></pre></div></p>

<p><div class="highlight"><pre><code class="bash"><span class="nb">command</span>! ip js ip<span class="o">()</span>
</code></pre></div></p>
]]></content>
  </entry>
  
</feed>
